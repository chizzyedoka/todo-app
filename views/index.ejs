<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Task UI</title>
    <link rel="stylesheet" href="/indexstyle.css" />
  </head>
  <body>
    <div class="container">
      <h5>Hi, <%= username %></h5>
      <section>
        <div class="overview-button">
          <button onclick="showOverview()">Overview</button>
        </div>
        <h2>My To-do App</h2>
        <div class="indicator">
          <h5 class="completed">Completed</h5>
          <h5 class="pending">Pending</h5>
          <h5 class="deleted">Deleted</h5>
        </div>
        <div class="add-task">
          <p>New Task</p>
          <span onclick="addNewTask()">+</span>
        </div>
      </section>
    </div>
  </body>
  <script>
    // check taskName in dataBase
    function checkTaskExits(taskName, taskStatus) {
      const url = "/task";
      const data = {
        taskName: taskName,
        taskStatus: taskStatus,
      };
      return fetch(url + "/" + taskName, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      })
        .then((response) => {
          if (!response.ok) {
            if (response.status == 404) {
              return null;
            }
            throw new Error("Not Found");
          }
          //task is found
          return data;
        })
        .catch((error) => {
          console.log("Error getting task from backend", error);
          return null;
        });
    }

    function sendTaskToBackend(taskName, taskStatus) {
      const url = "/task";
      checkTaskExits(taskName, taskStatus).then((data) => {
        // if taskName is in dataBase perform a put request
        console.log("Database", data);
        if (data) {
          fetch(url + "/" + taskName, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
              // Add any other headers you may need, like authentication headers
            },
            body: JSON.stringify(data),
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Network response was not ok");
              }
              return response.json(); // Assuming the backend sends back JSON
            })
            .then((data) => {
              console.log("Task updated in backend:", data);
            })
            .catch((error) => {
              console.error("Error sending task to backend:", error);
            });
          console.log("Task exits in database", data);
        } else {
          // if taskName isn't in dataBase perform a POST request
          fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              // Add any other headers you may need, like authentication headers
            },
            body: JSON.stringify({ taskName, taskStatus }),
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Network response was not ok");
              }
              return response.json(); // Assuming the backend sends back JSON
            })
            .then((data) => {
              console.log("Task sent to backend:", data);
            })
            .catch((error) => {
              console.error("Error sending task to backend:", error);
            });
        }
      });
    }

    function setTaskStatus(element) {
      const taskDiv = element.closest(".task");
      if (element.textContent === "COMPLETED") {
        taskDiv.style.backgroundColor = "rgba(1, 178, 114, 0.2)";
        taskDiv.style.color = "green";
      } else if (element.textContent === "DELETED") {
        taskDiv.style.backgroundColor = "rgba(231, 175, 164, 0.3)";
        taskDiv.style.color = "red";
      } else {
        taskDiv.style.backgroundColor = "#fff";
      }
      const taskStatus = element.textContent;
      // Send task to backend
      const taskName = taskDiv.querySelector("p").textContent;
      sendTaskToBackend(taskName, taskStatus);
    }

    function addNewTask() {
      const container = document.querySelector(".container section");
      const newTaskDiv = document.createElement("div");
      newTaskDiv.className = "task";

      const inputElement = document.createElement("input");
      inputElement.setAttribute("type", "text");
      inputElement.setAttribute("placeholder", "Type task name...");
      inputElement.addEventListener("keydown", function (event) {
        if (event.key === "Enter") {
          const taskName = event.target.value;

          createTaskElement(container, taskName);
          container.removeChild(newTaskDiv);
        }
      });

      newTaskDiv.appendChild(inputElement);
      const addTaskDiv = document.querySelector(".add-task");
      container.insertBefore(newTaskDiv, addTaskDiv);
    }

    function createTaskElement(container, taskName) {
      const taskDiv = document.createElement("div");
      taskDiv.className = "task";

      const taskNameP = document.createElement("p");
      taskNameP.textContent = taskName;
      taskDiv.appendChild(taskNameP);

      const dropdownDiv = document.createElement("div");
      dropdownDiv.className = "dropdown";
      const dropBtn = document.createElement("button");
      dropBtn.className = "dropbtn";
      dropBtn.innerHTML = "â–¼";
      dropdownDiv.appendChild(dropBtn);
      const dropdownContent = document.createElement("div");
      dropdownContent.className = "dropdown-content";

      ["COMPLETED", "PENDING", "DELETED"].forEach((status) => {
        const statusLink = document.createElement("a");
        statusLink.href = "#";
        statusLink.textContent = status;
        statusLink.addEventListener("click", function () {
          setTaskStatus(statusLink);
        });
        dropdownContent.appendChild(statusLink);
      });

      dropdownDiv.appendChild(dropdownContent);
      taskDiv.appendChild(dropdownDiv);

      const addTaskDiv = document.querySelector(".add-task");
      container.insertBefore(taskDiv, addTaskDiv);
    }

    function showOverview() {
      fetch("/overview", {
        method: "GET",
        headers: {
          "Content-Type": "text/html", // Set the content type to HTML
        },
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error(
              `Network response was not ok: ${response.statusText}`
            );
          }
          return response.text(); // Parse response as text
        })
        .then((html) => {
          // Create a container element to hold the HTML content
          const container = document.createElement("div");
          container.innerHTML = html;

          // Assuming you have a container element where you want to display the HTML
          const targetElement = document.getElementById("target-element");

          // Clear existing content (if any) and append the new HTML content
          targetElement.innerHTML = "";
          targetElement.appendChild(container);
        })
        .catch((error) => {
          console.error("Error fetching overview:", error);
          // Add code to handle errors here
        });
    }
  </script>
</html>
